override func viewDidLoad() {
    super.viewDidLoad()
    
    if let image = UIImage(named: "Group") {
        welcomeimage.image = image
    }

    Balanceviewcontainer.layer.cornerRadius = 20
    Balanceviewcontainer.layer.masksToBounds = true
                   
    setTopCornerRadius(for: Groupsviewcontainer, radius: 20)
    createVerticalDottedLineInBalanceContainer(atX: Balanceviewcontainer.bounds.size.width / 2)
    
    addgroupbutton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 30)
    addgroupbutton.titleLabel?.textAlignment = .center
                   
    makeButtonCircular()
}
    
func setTopCornerRadius(for view: UIView, radius: CGFloat) {
    let path = UIBezierPath(
        roundedRect: view.bounds,
        byRoundingCorners: [.topLeft, .topRight],
        cornerRadii: CGSize(width: radius, height: radius)
    )
    let maskLayer = CAShapeLayer()
    maskLayer.path = path.cgPath
    view.layer.mask = maskLayer
}

func resizeImage(image: UIImage, targetSize: CGSize) -> UIImage {
    let size = image.size
    let widthRatio  = targetSize.width  / size.width
    let heightRatio = targetSize.height / size.height
    let scaleFactor = min(widthRatio, heightRatio)
    let newSize = CGSize(width: size.width * scaleFactor, height: size.height * scaleFactor)
    
    UIGraphicsBeginImageContextWithOptions(newSize, false, image.scale)
    image.draw(in: CGRect(origin: .zero, size: newSize))
    let resizedImage = UIGraphicsGetImageFromCurrentImageContext()
    UIGraphicsEndImageContext()

    return resizedImage ?? image
}

func createVerticalDottedLineInBalanceContainer(atX xPosition: CGFloat) {
    let dottedLine = CAShapeLayer()
    let path = UIBezierPath()
    let centerY = Balanceviewcontainer.bounds.size.height / 2
    let lineLength: CGFloat = 98
    let startY = centerY - (lineLength / 2)
    let endY = startY + lineLength
    
    path.move(to: CGPoint(x: xPosition, y: startY))
    path.addLine(to: CGPoint(x: xPosition, y: endY))
    
    dottedLine.path = path.cgPath
    dottedLine.strokeColor = UIColor.black.withAlphaComponent(0.4).cgColor
    dottedLine.lineWidth = 1.5
    dottedLine.lineDashPattern = [6, 2]
    
    Balanceviewcontainer.layer.addSublayer(dottedLine)
}

func makeButtonCircular() {
    let sideLength = min(addgroupbutton.frame.size.width, addgroupbutton.frame.size.height)
    addgroupbutton.layer.cornerRadius = sideLength / 2
    addgroupbutton.layer.masksToBounds = true
}

func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return group.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "SplitCell", for: indexPath)
    let groupItem = group[indexPath.row]
    
    cell.textLabel?.text = groupItem.name
    cell.imageView?.image = groupItem.image
    cell.layer.cornerRadius = 10
    cell.layer.masksToBounds = true
    tableView.separatorInset = UIEdgeInsets(top: 50, left: 50, bottom: 50, right: 15)
    
    return cell
}

func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    print("Selected Group: \(group[indexPath.row])")
}

func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    return 50
}
